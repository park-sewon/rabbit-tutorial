theory rabbit

begin
functions: true/0, test/0, snd/1, fst/1, verify/3, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(d, k), d, pk(k))=true(), dec(enc(x, y), y)=x, snd(<x, y>)=y, fst(<x, y>)=x

// External attacks:

rule Tampar_ch : [!Tampar_ch__Allowed(c), In(w)[-,no_precomp], Store(c, v)[-,no_precomp]]-->[Store(c, w)] 
rule Eaves_ch : [!Eaves_ch__Allowed(c), Store(c, v)[-,no_precomp]]-->[Out(v), Store(c, v)] 
rule Drop_ch : [!Drop_ch__Allowed(c), Store(c, v)[-,no_precomp]]-->[] 

// Global constants:

rule Const__priv_k : [Fr(priv_k)]-->[!Const__('rabbit__priv_k', priv_k)] 
rule Const__sym_k : [Fr(sym_k)]-->[!Const__('rabbit__sym_k', sym_k)] 
rule Const__init_data : [Fr(init_data)]-->[!Const__('rabbit__init_data', init_data)] 

// Initial file system:

rule Client_ta_fs__secret__priv__init : [!Const__('rabbit__priv_k', priv_k), !Const__('rabbit__sym_k', sym_k)]--[Client_ta_fs__secret__priv__init()]->[File(<'rabbit__client_ta_fs', 'rabbit____secret__priv'>, enc(priv_k, sym_k))] 
rule Server_fs__secret__pub__init : [!Const__('rabbit__priv_k', priv_k)]--[Server_fs__secret__pub__init()]->[File(<'rabbit__server_fs', 'rabbit____secret__pub'>, pk(priv_k))] 
rule Client_fs__secret__pub__init : [!Const__('rabbit__priv_k', priv_k)]--[Client_fs__secret__pub__init()]->[File(<'rabbit__client_fs', 'rabbit____secret__pub'>, pk(priv_k))] 

// Access control:

rule Client_ta__rpc__run_rpc : []--[Client_ta__rpc__run_rpc()]->[!Run_rpc__Allowed('rabbit__Client_ta', 'rabbit__rpc')] 
rule Client_ta__rpc__accept_rpc : []--[Client_ta__rpc__accept_rpc()]->[!Accept_rpc__Allowed('rabbit__Client_ta', 'rabbit__rpc')] 
rule Client_ta__client_ta_fs____secret__priv__fclose : []--[Client_ta__client_ta_fs____secret__priv__fclose()]->[!Fclose__Allowed('rabbit__Client_ta', <'rabbit__client_ta_fs', 'rabbit____secret__priv'>)] 
rule Client_ta__client_ta_fs____secret__priv__fread : []--[Client_ta__client_ta_fs____secret__priv__fread()]->[!Fread__Allowed('rabbit__Client_ta', <'rabbit__client_ta_fs', 'rabbit____secret__priv'>)] 
rule Client_ta__client_ta_fs____secret__priv__fopen : []--[Client_ta__client_ta_fs____secret__priv__fopen()]->[!Fopen__Allowed('rabbit__Client_ta', <'rabbit__client_ta_fs', 'rabbit____secret__priv'>)] 
rule Server__udp__recv : []--[Server__udp__recv()]->[!Recv__Allowed('rabbit__Server', 'rabbit__udp')] 
rule Server__server_fs____secret__pub__fclose : []--[Server__server_fs____secret__pub__fclose()]->[!Fclose__Allowed('rabbit__Server', <'rabbit__server_fs', 'rabbit____secret__pub'>)] 
rule Server__server_fs____secret__pub__fread : []--[Server__server_fs____secret__pub__fread()]->[!Fread__Allowed('rabbit__Server', <'rabbit__server_fs', 'rabbit____secret__pub'>)] 
rule Server__server_fs____secret__pub__fopen : []--[Server__server_fs____secret__pub__fopen()]->[!Fopen__Allowed('rabbit__Server', <'rabbit__server_fs', 'rabbit____secret__pub'>)] 
rule Client__rpc__close_rpc : []--[Client__rpc__close_rpc()]->[!Close_rpc__Allowed('rabbit__Client', 'rabbit__rpc')] 
rule Client__rpc__invoke_rpc : []--[Client__rpc__invoke_rpc()]->[!Invoke_rpc__Allowed('rabbit__Client', 'rabbit__rpc')] 
rule Client__rpc__connect_rpc : []--[Client__rpc__connect_rpc()]->[!Connect_rpc__Allowed('rabbit__Client', 'rabbit__rpc')] 
rule Client__udp__send : []--[Client__udp__send()]->[!Send__Allowed('rabbit__Client', 'rabbit__udp')] 
rule Client__get_picture : []--[Client__get_picture()]->[!Get_picture__Allowed('rabbit__Client')] 

// Attacker policy:


// Processes:


// - Process name: Client


// -- initialization rules

rule Client__init[role="Client"] : []--[Client__init()]->[Frame__Client('rabbit__Client__init', 'rabbit__', 'rabbit__')] 
rule Client__init__0[role="Client"] : [Frame__Client('rabbit__Client__init', 'rabbit__', 'rabbit__')]-->[Frame__Client('rabbit__Client__init__0', 'rabbit__', 'rabbit__sign_image')] 
rule Client__init__1[role="Client"] : [Frame__Client('rabbit__Client__init__0', 'rabbit__', invoke_func)]-->[Frame__Client('rabbit__Client__init__1', 'rabbit__', <'rabbit____secret__priv', invoke_func>)] 
rule Client__init__2[role="Client"] : [Frame__Client('rabbit__Client__init__1', 'rabbit__', <privkey_path, invoke_func>)]-->[Frame__Client('rabbit__Client__init__2', 'rabbit__', <'rabbit____dev__camera', privkey_path, invoke_func>)] 

// -- main function 

rule Client__main__start[role="Client"] : [Frame__Client('rabbit__Client__init__2', 'rabbit__', <dev_path, privkey_path, invoke_func>)]-->[Frame__Client('rabbit__Client__main', 'rabbit__', <dev_path, privkey_path, invoke_func>)] 
rule Client__main[role="Client"] : [Frame__Client('rabbit__Client__main', 'rabbit__', <dev_path, privkey_path, invoke_func>), !Connect_rpc__Allowed('rabbit__Client', 'rabbit__rpc')]-->[Frame__Client('rabbit__Client__main__0__Connect_rpc', 'rabbit__', <dev_path, privkey_path, invoke_func>), Ask('rabbit__rpc')] 
rule Client__main__0__Connect_rpc[role="Client"] : [Frame__Client('rabbit__Client__main__0__Connect_rpc', 'rabbit__', <dev_path, privkey_path, invoke_func>), Fr(x__), Accept('rabbit__rpc')[-,no_precomp]]--[A()]->[Frame__Client('rabbit__Client__main__0', x__, <dev_path, privkey_path, invoke_func>), Chid('rabbit__Client', 'rabbit__rpc', x__), Connect('rabbit__rpc')] 
rule Client__main__0__for__1__start[role="Client"] : [Frame__Client('rabbit__Client__main__0', conn, <dev_path, privkey_path, invoke_func>)]-->[Frame__Client('rabbit__Client__main__0__for__1', <'1', conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__0__for__1[role="Client"] : [Frame__Client('rabbit__Client__main__0__for__1', <i, conn>, <dev_path, privkey_path, invoke_func>), !Get_picture__Allowed('rabbit__Client'), Fr(v__)]--[B()]->[Frame__Client('rabbit__Client__main__1__for__1', <v__, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__1__for__1[role="Client"] : [Frame__Client('rabbit__Client__main__1__for__1', <image, i, conn>, <dev_path, privkey_path, invoke_func>), !Invoke_rpc__Allowed('rabbit__Client', 'rabbit__rpc'), Connect('rabbit__rpc')[-,no_precomp]]-->[Frame__Client('rabbit__Client__main__2__for__1__Invoke_rpc', <image, i, conn>, <dev_path, privkey_path, invoke_func>), Connect('rabbit__rpc'), Invoke('rabbit__rpc', invoke_func, <image, privkey_path>)] 
rule Client__main__2__for__1__Invoke_rpc[role="Client"] : [Frame__Client('rabbit__Client__main__2__for__1__Invoke_rpc', <image, i, conn>, <dev_path, privkey_path, invoke_func>), Hearback('rabbit__rpc', x__)[-,no_precomp]]--[C()]->[Frame__Client('rabbit__Client__main__2__for__1', <x__, image, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__2__for__1[role="Client"] : [Frame__Client('rabbit__Client__main__2__for__1', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)]--[Got(sig)]->[Frame__Client('rabbit__Client__main__3__for__1', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__3__for__1[role="Client"] : [Frame__Client('rabbit__Client__main__3__for__1', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>), !Send__Allowed('rabbit__Client', 'rabbit__udp')]--[ImgSend(image)]->[Frame__Client('rabbit__Client__main__4__for__1', <'rabbit__rabbit', sig, image, i, conn>, <dev_path, privkey_path, invoke_func>), Store('rabbit__udp', <sig, image>)] 
rule Client__main__0__for__2__start[role="Client"] : [Frame__Client('rabbit__Client__main__4__for__1', <'rabbit__rabbit', sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)]-->[Frame__Client('rabbit__Client__main__0__for__2', <'2', conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__0__for__2[role="Client"] : [Frame__Client('rabbit__Client__main__0__for__2', <i, conn>, <dev_path, privkey_path, invoke_func>), !Get_picture__Allowed('rabbit__Client'), Fr(v__)]--[B()]->[Frame__Client('rabbit__Client__main__1__for__2', <v__, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__1__for__2[role="Client"] : [Frame__Client('rabbit__Client__main__1__for__2', <image, i, conn>, <dev_path, privkey_path, invoke_func>), !Invoke_rpc__Allowed('rabbit__Client', 'rabbit__rpc'), Connect('rabbit__rpc')[-,no_precomp]]-->[Frame__Client('rabbit__Client__main__2__for__2__Invoke_rpc', <image, i, conn>, <dev_path, privkey_path, invoke_func>), Connect('rabbit__rpc'), Invoke('rabbit__rpc', invoke_func, <image, privkey_path>)] 
rule Client__main__2__for__2__Invoke_rpc[role="Client"] : [Frame__Client('rabbit__Client__main__2__for__2__Invoke_rpc', <image, i, conn>, <dev_path, privkey_path, invoke_func>), Hearback('rabbit__rpc', x__)[-,no_precomp]]--[C()]->[Frame__Client('rabbit__Client__main__2__for__2', <x__, image, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__2__for__2[role="Client"] : [Frame__Client('rabbit__Client__main__2__for__2', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)]--[Got(sig)]->[Frame__Client('rabbit__Client__main__3__for__2', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__3__for__2[role="Client"] : [Frame__Client('rabbit__Client__main__3__for__2', <sig, image, i, conn>, <dev_path, privkey_path, invoke_func>), !Send__Allowed('rabbit__Client', 'rabbit__udp')]--[ImgSend(image)]->[Frame__Client('rabbit__Client__main__4__for__2', <'rabbit__rabbit', sig, image, i, conn>, <dev_path, privkey_path, invoke_func>), Store('rabbit__udp', <sig, image>)] 
rule Client__main__0[role="Client"] : [Frame__Client('rabbit__Client__main__4__for__2', <'rabbit__rabbit', sig, image, i, conn>, <dev_path, privkey_path, invoke_func>)]-->[Frame__Client('rabbit__Client__main__1', conn, <dev_path, privkey_path, invoke_func>)] 
rule Client__main__1[role="Client"] : [Frame__Client('rabbit__Client__main__1', conn, <dev_path, privkey_path, invoke_func>), !Close_rpc__Allowed('rabbit__Client', c), Chid('rabbit__Client', c, conn)[-,no_precomp], Connect(c)[-,no_precomp]]-->[Frame__Client('rabbit__Client__main__2', <'rabbit__rabbit', conn>, <dev_path, privkey_path, invoke_func>), Close(c)] 
rule Client__main__2[role="Client"] : [Frame__Client('rabbit__Client__main__2', <'rabbit__rabbit', conn>, <dev_path, privkey_path, invoke_func>)]--[ClientClose()]->[Frame__Client('rabbit__Client__main__3', <'rabbit__rabbit', conn>, <dev_path, privkey_path, invoke_func>)] 

// - Process name: Server


// -- initialization rules

rule Server__init[role="Server"] : []--[Server__init()]->[Frame__Server('rabbit__Server__init', 'rabbit__', 'rabbit__')] 
rule Server__init__0[role="Server"] : [Frame__Server('rabbit__Server__init', 'rabbit__', 'rabbit__')]-->[Frame__Server('rabbit__Server__init__0', 'rabbit__', 'rabbit____secret__pub')] 

// -- main function 

rule Server__main__start[role="Server"] : [Frame__Server('rabbit__Server__init__0', 'rabbit__', pubkey_path)]-->[Frame__Server('rabbit__Server__main', 'rabbit__', pubkey_path)] 
rule Server__main[role="Server"] : [Frame__Server('rabbit__Server__main', 'rabbit__', pubkey_path), !Fopen__Allowed('rabbit__Server', <'rabbit__server_fs', pubkey_path>), Fr(x__)]-->[Frame__Server('rabbit__Server__main__0', x__, pubkey_path), Fd('rabbit__Server', <'rabbit__server_fs', pubkey_path>, x__)] 
rule Server__main__0[role="Server"] : [Frame__Server('rabbit__Server__main__0', pubkey_fd, pubkey_path), !Fread__Allowed('rabbit__Server', p), Fd('rabbit__Server', p, pubkey_fd)[-,no_precomp], File(p, x__)[-,no_precomp]]-->[Frame__Server('rabbit__Server__main__1', <x__, pubkey_fd>, pubkey_path), Fd('rabbit__Server', p, pubkey_fd), File(p, x__)] 
rule Server__main__1__for__1__start[role="Server"] : [Frame__Server('rabbit__Server__main__1', <pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__1__for__1', <'1', pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__1__for__1[role="Server"] : [Frame__Server('rabbit__Server__main__1__for__1', <i, pubkey, pubkey_fd>, pubkey_path), !Recv__Allowed('rabbit__Server', 'rabbit__udp'), Store('rabbit__udp', v__)[-,no_precomp]]-->[Frame__Server('rabbit__Server__main__2__for__1', <v__, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__2__for__1[role="Server"] : [Frame__Server('rabbit__Server__main__2__for__1', <p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__3__for__1', <verify(fst(p), snd(p), pubkey), p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__in__then[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__1', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[Eq(res, true())]->[Frame__Server('rabbit__Server__main__3__for__1__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__in__else[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__1', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[Neq(res, true())]->[Frame__Server('rabbit__Server__main__3__for__1__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__then[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__1__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[ImgRecvValid(snd(p))]->[Frame__Server('rabbit__Server__main__4__for__1__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__out__then[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__1__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__4__for__1', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__else[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__1__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[ImgRecvInvalid(snd(p))]->[Frame__Server('rabbit__Server__main__4__for__1__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__1__out__else[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__1__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__4__for__1', pubkey_path, pubkey_path)] 
rule Server__main__1__for__2__start[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__1', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__1__for__2', <'2', pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__1__for__2[role="Server"] : [Frame__Server('rabbit__Server__main__1__for__2', <i, pubkey, pubkey_fd>, pubkey_path), !Recv__Allowed('rabbit__Server', 'rabbit__udp'), Store('rabbit__udp', v__)[-,no_precomp]]-->[Frame__Server('rabbit__Server__main__2__for__2', <v__, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__2__for__2[role="Server"] : [Frame__Server('rabbit__Server__main__2__for__2', <p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__3__for__2', <verify(fst(p), snd(p), pubkey), p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__in__then[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__2', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[Eq(res, true())]->[Frame__Server('rabbit__Server__main__3__for__2__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__in__else[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__2', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[Neq(res, true())]->[Frame__Server('rabbit__Server__main__3__for__2__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__then[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__2__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[ImgRecvValid(snd(p))]->[Frame__Server('rabbit__Server__main__4__for__2__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__out__then[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__2__then', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__4__for__2', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__else[role="Server"] : [Frame__Server('rabbit__Server__main__3__for__2__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]--[ImgRecvInvalid(snd(p))]->[Frame__Server('rabbit__Server__main__4__for__2__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__3__for__2__out__else[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__2__else', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__4__for__2', pubkey_path, pubkey_path)] 
rule Server__main__1[role="Server"] : [Frame__Server('rabbit__Server__main__4__for__2', <res, p, i, pubkey, pubkey_fd>, pubkey_path)]-->[Frame__Server('rabbit__Server__main__2', <pubkey, pubkey_fd>, pubkey_path)] 
rule Server__main__2[role="Server"] : [Frame__Server('rabbit__Server__main__2', <pubkey, pubkey_fd>, pubkey_path), !Fclose__Allowed('rabbit__Server', p), Fd('rabbit__Server', p, pubkey_fd)[-,no_precomp], File(p, x__)[-,no_precomp]]-->[Frame__Server('rabbit__Server__main__3', <'rabbit__rabbit', pubkey, pubkey_fd>, pubkey_path), File(p, x__)] 
rule Server__main__3[role="Server"] : [Frame__Server('rabbit__Server__main__3', <'rabbit__rabbit', pubkey, pubkey_fd>, pubkey_path)]--[ServerClose()]->[Frame__Server('rabbit__Server__main__4', <'rabbit__rabbit', pubkey, pubkey_fd>, pubkey_path)] 

// - Process name: Client_ta


// -- initialization rules

rule Client_ta__init[role="Client_ta"] : []--[Client_ta__init()]->[Frame__Client_ta('rabbit__Client_ta__init', 'rabbit__', 'rabbit__')] 
rule Client_ta__init__0[role="Client_ta"] : [Frame__Client_ta('rabbit__Client_ta__init', 'rabbit__', 'rabbit__'), !Const__('rabbit__sym_k', sym_k)]-->[Frame__Client_ta('rabbit__Client_ta__init__0', 'rabbit__', sym_k)] 

// -- member function sign_image
rule Client_ta__sign_image__run[role="Client_ta__sign_image"] : [Run__('rabbit__Client_ta', 'rabbit__sign_image', i, <image, privkey_path>)[-,no_precomp], Frame__Client_ta(state__, local_frame__, top_frame__)]--[Myrun(i, state__)]->[Frame__hold(<'rabbit__Client_ta', i>,  state__, local_frame__), Frame__Client_ta(<'rabbit__Client_ta__sign_image', i>, <privkey_path, image>, top_frame__)] 
rule Client_ta__sign_image[role="Client_ta__sign_image"] : [Frame__Client_ta(<'rabbit__Client_ta__sign_image', i>, <privkey_path, image>, fek), !Const__('rabbit__priv_k', priv_k), !Const__('rabbit__sym_k', sym_k)]-->[Frame__Client_ta(<'rabbit__Client_ta__sign_image__0', i>, <dec(enc(priv_k, sym_k), fek), privkey_path, image>, fek)] 
rule Client_ta__sign_image__0[role="Client_ta__sign_image"] : [Frame__Client_ta(<'rabbit__Client_ta__sign_image__0', i>, <privkey0, privkey_path, image>, fek)]-->[Frame__Client_ta(<'rabbit__Client_ta__sign_image__1', i>, <sign(image, privkey0), privkey0, privkey_path, image>, fek)] 
rule Client_ta__sign_image__return[role="Client_ta__sign_image"] : [Frame__Client_ta(<'rabbit__Client_ta__sign_image__1', i>, <sig, privkey0, privkey_path, image>, fek), Frame__hold(<'rabbit__Client_ta', i>, state__, local_frame__)]--[Myreturn(i, state__)]->[Return__('rabbit__Client_ta', 'rabbit__sign_image', i, sig), Frame__Client_ta(state__, local_frame__, fek)] 

// -- main function 

rule Client_ta__main__start[role="Client_ta"] : [Frame__Client_ta('rabbit__Client_ta__init__0', 'rabbit__', fek)]-->[Frame__Client_ta('rabbit__Client_ta__main', 'rabbit__', fek)] 
rule Client_ta__main[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main', 'rabbit__', fek), !Accept_rpc__Allowed('rabbit__Client_ta', 'rabbit__rpc'), Ask('rabbit__rpc')[-,no_precomp]]
--> [Frame__Client_ta('rabbit__Client_ta__main__0', 'rabbit__rabbit', fek), Accept('rabbit__rpc')] 

rule Client_ta__main__0[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main__0', 'rabbit__rabbit', fek), !Run_rpc__Allowed('rabbit__Client_ta', 'rabbit__rpc'), Invoke('rabbit__rpc', f__, args__)[-,no_precomp]]
--> [Frame__Client_ta('rabbit__Client_ta__main__1__Run_rpc', 'rabbit__rabbit', fek), Run__('rabbit__Client_ta', f__, '0', args__)] 

rule Client_ta__main__1__Run_rpc[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main__1__Run_rpc', 'rabbit__rabbit', fek), Return__('rabbit__Client_ta', f__, '0',  x__)[-,no_precomp]]
--> [Frame__Client_ta('rabbit__Client_ta__main__1', <'rabbit__rabbit', 'rabbit__rabbit'>, fek), Hearback('rabbit__rpc', x__)] 

rule Client_ta__main__1[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main__1', <'rabbit__rabbit', 'rabbit__rabbit'>, fek), !Run_rpc__Allowed('rabbit__Client_ta', 'rabbit__rpc'), Invoke('rabbit__rpc', f__, args__)[-,no_precomp]]
--> [Frame__Client_ta('rabbit__Client_ta__main__2__Run_rpc', <'rabbit__rabbit', 'rabbit__rabbit'>, fek), Run__('rabbit__Client_ta', f__, '1', args__)] 

rule Client_ta__main__2__Run_rpc[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main__2__Run_rpc', <'rabbit__rabbit', 'rabbit__rabbit'>, fek), Return__('rabbit__Client_ta', f__, '1',  x__)[-,no_precomp]]
--> [Frame__Client_ta('rabbit__Client_ta__main__2', <'rabbit__rabbit', 'rabbit__rabbit', 'rabbit__rabbit'>, fek), Hearback('rabbit__rpc', x__)] 

rule Client_ta__main__2[role="Client_ta"] : 
	[Frame__Client_ta('rabbit__Client_ta__main__2', <'rabbit__rabbit', 'rabbit__rabbit', 'rabbit__rabbit'>, fek)]--[ClientTAClose()]->
	[Frame__Client_ta('rabbit__Client_ta__main__3', <'rabbit__rabbit', 'rabbit__rabbit', 'rabbit__rabbit'>, fek)] 

restriction Client_ta__init : " All #i #j . Client_ta__init() @ #i & Client_ta__init() @ #j ==> #i = #j "
restriction Server__init : " All #i #j . Server__init() @ #i & Server__init() @ #j ==> #i = #j "
restriction Client__init : " All #i #j . Client__init() @ #i & Client__init() @ #j ==> #i = #j "
restriction Client__get_picture : " All #i #j . Client__get_picture() @ #i & Client__get_picture() @ #j ==> #i = #j "
restriction Client__udp__send : " All #i #j . Client__udp__send() @ #i & Client__udp__send() @ #j ==> #i = #j "
restriction Client__rpc__connect_rpc : " All #i #j . Client__rpc__connect_rpc() @ #i & Client__rpc__connect_rpc() @ #j ==> #i = #j "
restriction Client__rpc__invoke_rpc : " All #i #j . Client__rpc__invoke_rpc() @ #i & Client__rpc__invoke_rpc() @ #j ==> #i = #j "
restriction Client__rpc__close_rpc : " All #i #j . Client__rpc__close_rpc() @ #i & Client__rpc__close_rpc() @ #j ==> #i = #j "
restriction Server__server_fs____secret__pub__fopen : " All #i #j . Server__server_fs____secret__pub__fopen() @ #i & Server__server_fs____secret__pub__fopen() @ #j ==> #i = #j "
restriction Server__server_fs____secret__pub__fread : " All #i #j . Server__server_fs____secret__pub__fread() @ #i & Server__server_fs____secret__pub__fread() @ #j ==> #i = #j "
restriction Server__server_fs____secret__pub__fclose : " All #i #j . Server__server_fs____secret__pub__fclose() @ #i & Server__server_fs____secret__pub__fclose() @ #j ==> #i = #j "
restriction Server__udp__recv : " All #i #j . Server__udp__recv() @ #i & Server__udp__recv() @ #j ==> #i = #j "
restriction Client_ta__client_ta_fs____secret__priv__fopen : " All #i #j . Client_ta__client_ta_fs____secret__priv__fopen() @ #i & Client_ta__client_ta_fs____secret__priv__fopen() @ #j ==> #i = #j "
restriction Client_ta__client_ta_fs____secret__priv__fread : " All #i #j . Client_ta__client_ta_fs____secret__priv__fread() @ #i & Client_ta__client_ta_fs____secret__priv__fread() @ #j ==> #i = #j "
restriction Client_ta__client_ta_fs____secret__priv__fclose : " All #i #j . Client_ta__client_ta_fs____secret__priv__fclose() @ #i & Client_ta__client_ta_fs____secret__priv__fclose() @ #j ==> #i = #j "
restriction Client_ta__rpc__accept_rpc : " All #i #j . Client_ta__rpc__accept_rpc() @ #i & Client_ta__rpc__accept_rpc() @ #j ==> #i = #j "
restriction Client_ta__rpc__run_rpc : " All #i #j . Client_ta__rpc__run_rpc() @ #i & Client_ta__rpc__run_rpc() @ #j ==> #i = #j "
restriction Client_fs__secret__pub__init : " All #i #j . Client_fs__secret__pub__init() @ #i & Client_fs__secret__pub__init() @ #j ==> #i = #j "
restriction Server_fs__secret__pub__init : " All #i #j . Server_fs__secret__pub__init() @ #i & Server_fs__secret__pub__init() @ #j ==> #i = #j "
restriction Client_ta_fs__secret__priv__init : " All #i #j . Client_ta_fs__secret__priv__init() @ #i & Client_ta_fs__secret__priv__init() @ #j ==> #i = #j "
restriction Equality: " All x y #i. Eq(x,y) @ #i ==> x = y"
restriction Inequality: "All x #i. Neq(x,x) @ #i ==> F"

restriction Running1 : "All x #i . Myrun('0', x) @ #i ==> x = 'rabbit__Client_ta__main__1__Run_rpc'"
restriction Running2 : "All x #i . Myrun('1', x) @ #i ==> x = 'rabbit__Client_ta__main__2__Run_rpc'"
restriction Returning1 : "All x #i . Myreturn('0', x) @ #i ==> x = 'rabbit__Client_ta__main__1__Run_rpc'"
restriction Returning2 : "All x #i . Myreturn('1', x) @ #i ==> x = 'rabbit__Client_ta__main__2__Run_rpc'"

restriction Runninginj : "All x y z #i #j . Myrun(x, y) @ #i & Myrun(x, z) @ #j ==> #i = #j "
restriction Returninginj : "All x y z #i #j . Myreturn(x, y) @ #i & Myreturn(x, z) @ #j ==> #i = #j "


restriction Order1 : "All x y #i #j . Myrun('0', x) @ #i &  Myrun('1', y) @ #j ==> i < j"
restriction Order2 : "All x y #i #j . Myreturn('0', x) @ #i &  Myrun('1', y) @ #j ==> i < j"


lemma Reachability1 : exists-trace "Ex #i #j #k  . ClientClose() @ i &  ClientTAClose () @ j & ServerClose () @ k "
lemma Reachability2 : exists-trace "Ex #i . A() @ i "
lemma Reachability3 : exists-trace "Ex #j  . B () @ j "
lemma Reachability4 : exists-trace "Ex #k  .  C () @ k "
lemma Correspondence : all-traces "All x #j  . ImgRecvValid(x) @ #j ==> Ex #i . ImgSend (x) @ i & i < j"
end

