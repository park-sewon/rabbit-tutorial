(* Very Simple RAB file for computing 4 *)


(***********)
(** declare external constants and functions as a equational theory *)
(* function : arity where arity = 0 defines constant *)
function add:2
function O:0
constant ichi

equation add(x, O) = x
equation add(O, x) = x


(***********)
(* File system syscalls *)
(* p:File when p:path is reserved fact *)
syscall wopen(path p) return x : [ &Fr(x) ] -> [ Fd(p, x) ]
syscall write(x, v) : [Fd(p, x), p:File(y)] -> [ p:File(v)]

(***********)
(** declare types with their classes *)
type writable_t : filesys
type process_t 	: process
type channel_t 	: channel


(***********)
allow process_t writable_t [wopen, write]

(***********)
(** define channels and file systems *)
channel decent_channel : channel_t
filesys boring_filesys = [{path: "some/path", data: O, type: writable_t}]


(***********)
(** define process templates *)
process proc(c) with process_t {
	main {
		let fd = wopen("some/path");
		let _  = write(fd, ichi) @ Computed();
	}
}

(***********)
(** realize a system *)
system proc(decent_channel) with boring_filesys
requires  [
  lemma Reachability1 :
    exists-trace "Ex #j  . Computed() @ #j" 
    ]