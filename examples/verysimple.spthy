theory camimage 

begin
 functions: myone/0, myzero/0, myplus/2
rule Send_udp : [Send_udp(proc, c, v)]-->[Send_udp__return(proc, 'rabbit'), Store(c, v)] 
rule Recv_udp : [Recv_udp(proc, c), Store(c, v)]-->[Recv_udp__return(proc, v)] 

rule Client0__init : []--[Client0_init()]->[Client0__init()] 
rule Client0__init__0 : [Client0__init()]-->[Client0__init__0(myplus(myone(), myone()))] 
rule Client0__main : [Client0__init__0(mytwo)]-->[Client0__main(mytwo)] 
rule Client0__main__in : [Client0__main(mytwo)]-->[Client0__main__wait(mytwo), Send_udp('Client0', 'decent_channel', mytwo)] 
rule Client0__main__out : [Client0__main__wait(mytwo), Send_udp__return('Client0', rabbit)]--[Querying()]->[Client0__main__0('rabbit', mytwo)] 
rule Client0__main__0__in : [Client0__main__0('rabbit', mytwo)]-->[Client0__main__0__wait('rabbit', mytwo), Recv_udp('Client0', 'decent_channel')] 
rule Client0__main__0__out : [Client0__main__0__wait('rabbit', mytwo), Recv_udp__return('Client0', four)]--[Computed(four)]->[Client0__main__1(four, 'rabbit', mytwo)] 

rule Server1__init : []--[Server1_init()]->[Server1__init()] 

rule Server1__double : [Server1__double(x2, x1)]--[Doubling(x1)]->[Server1__double__0(myplus(x1, x2), x2, x1)] 
rule Server1__double__return : [Server1__double__0(y, x2, x1)]-->[Server1__double__return(y)] 

rule Server1__main : [Server1__init()]-->[Server1__main()] 
rule Server1__main__in : [Server1__main()]-->[Server1__main__wait(), Recv_udp('Server1', 'decent_channel')] 
rule Server1__main__out : [Server1__main__wait(), Recv_udp__return('Server1', x)]--[Receiving(x)]->[Server1__main__0(x)] 
rule Server1__main__0__in : [Server1__main__0(x)]-->[Server1__main__0__wait(x), Server1__double(x, x)] 
rule Server1__main__0__out : [Server1__main__0__wait(x), Server1__double__return(double_x)]-->[Server1__main__1(double_x, x)] 
rule Server1__main__1__in : [Server1__main__1(double_x, x)]-->[Server1__main__1__wait(double_x, x), Send_udp('Server1', 'decent_channel', double_x)] 
rule Server1__main__1__out : [Server1__main__1__wait(double_x, x), Send_udp__return('Server1', rabbit)]-->[Server1__main__2('rabbit', double_x, x)]




restriction Client0_init : 
  " All #i #j . Client0_init() @ #i & Client0_init() @ #j ==> #i = #j "

restriction Server1_init : 
  " All #i #j . Server1_init() @ #i & Server1_init() @ #j ==> #i = #j "

lemma Finish :
  exists-trace
  "Ex #j  . Querying() @ #j"
end