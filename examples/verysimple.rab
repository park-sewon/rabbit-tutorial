(** very simple rab file to test xml printing *)

(** declare external constants and functions as a equational theory *)
(* function : arity where arity = 0 defines constant *)
external function plus:2
external function zero:0
external constant one
equation plus(x, zero) = x
equation plus(x, y) = plus(y, x)

(** declare types with their classes *)
type filesys_t 	: filesys
type server_t 	: process
type client_t 	: process
type channel_t 	: channel

(** declare allowed accesses and attacks *)
allow client_t channel_t [send, recv]
allow server_t channel_t [send, recv]
attack server_t [tamper]
attack channel_t [eavesdrop,tamper]

(** define channels and file systems *)
channel decent_channel = {transfer: datagram, type: channel_t}
filesys boring_filesys = [{path: "some/path", data: zero, type: filesys_t}]

(** define process templates *)
process client(ch) with client_t {
	let two = plus(one, one) ; 
	main {
		let _ = send(ch, two) @ Querying();
		let four = recv(ch) @ Computed(four);
	}
}

process server(ch) with server_t {
	function double (x1, x2){
		let y = plus (x1, x2) @ Doubling(x1);
		return y;
	}
	main {
		let x = recv(ch) @ Receiving(x); 
		let double_x = double(x, x); 
		let _ = send(ch, double_x);
	}
}

(** realize a system *)
system 
	client(decent_channel) with boring_filesys 
|| 	server(decent_channel) with boring_filesys

(** requirement is ignored at the moment *)
requires 
[lemma a : True]