theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, h/1, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, loc__0), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__priv_k : [Fr(priv_k)]--[Init__('rab__Const__priv_k'), Init__(<'rab__Const__priv_k', priv_k>)]->[!Const__('rab__priv_k', priv_k)] 

rule Const__sym_k : [Fr(sym_k)]--[Init__('rab__Const__sym_k'), Init__(<'rab__Const__sym_k', sym_k>)]->[!Const__('rab__sym_k', sym_k)] 

rule Const__init_data : [Fr(init_data)]--[Init__('rab__Const__init_data'), Init__(<'rab__Const__init_data', init_data>)]->[!Const__('rab__init_data', init_data)] 


// Access control:


rule Client_ta__rpc__accept_rpc : []-->[!ACP__('rab__Client_ta', 'rab__rpc', 'rab__accept_rpc')] 

rule Client_ta__rpc__ : []-->[!ACP__('rab__Client_ta', 'rab__rpc', 'rab__')] 

rule Client_ta__client_ta_fs____secret__priv__fclose : []-->[!ACP__('rab__Client_ta', 'rab____secret__priv', 'rab__fclose')] 

rule Client_ta__client_ta_fs____secret__priv__fread : []-->[!ACP__('rab__Client_ta', 'rab____secret__priv', 'rab__fread')] 

rule Client_ta__client_ta_fs____secret__priv__fopen : []-->[!ACP__('rab__Client_ta', 'rab____secret__priv', 'rab__fopen')] 

rule Server__udp__recv : []-->[!ACP__('rab__Server', 'rab__udp', 'rab__recv')] 

rule Server____tampar_channel : []-->[!Attack__('rab__Server', 'rab__tampar_channel')] 

rule Server__server_fs____secret__pub__fclose : []-->[!ACP__('rab__Server', 'rab____secret__pub', 'rab__fclose')] 

rule Server__server_fs____secret__pub__fread : []-->[!ACP__('rab__Server', 'rab____secret__pub', 'rab__fread')] 

rule Server__server_fs____secret__pub__fopen : []-->[!ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen')] 

rule Client__rpc__close_rpc : []-->[!ACP__('rab__Client', 'rab__rpc', 'rab__close_rpc')] 

rule Client__rpc__invoke_rpc : []-->[!ACP__('rab__Client', 'rab__rpc', 'rab__invoke_rpc')] 

rule Client__rpc__connect_rpc : []-->[!ACP__('rab__Client', 'rab__rpc', 'rab__connect_rpc')] 

rule Client__udp__send : []-->[!ACP__('rab__Client', 'rab__udp', 'rab__send')] 

rule Client__rpc__ : []-->[!ACP__('rab__Client', 'rab__rpc', 'rab__')] 

// Model:  Client


rule Client__secret__pub : [!Const__('rab__priv_k', priv_k)]--[Init__(<'rab__Client', 'rab____secret__pub'>)]->[File__Client('rab____secret__pub', pk(priv_k))] 

rule InitClient[role="Client"] : []--[Init__('rab__Client')]->[State__Client(<'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__')] 

rule Client__merged_____0_____4__0_1__96[role="Client"] : [State__Client(<'rab_____0', %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !ACP__('rab__Client', 'rab__rpc', 'rab__connect_rpc')]--[Transition__Client('rab__96', %v__)]->[State__Client(<'rab_____4__0_1', %v__>, 'rab__', 'rab__', <'rab__rpc', 'rab__'>, <'rab__sign_image', 'rab____secret__priv', 'rab____dev__camera'>), Req('rab__rpc')] 

rule Client__merged_____4__0_1_____4__0_1__0_2__91[role="Client"] : [State__Client(<'rab_____4__0_1', %v__>, return__var__6, 'rab__', <l__0__6, l__1__6>, <t__0__6, t__1__6, t__2__6>), Ack(l__0__6), !ACP__('rab__Client', l__0__6, 'rab__connect_rpc'), !ACP__('rab__Client', l__0__6, 'rab__connect_rpc'), Fr(n__0__7)]--[Transition__Client('rab__91', %v__)]->[State__Client(<'rab_____4__0_1__0_2', %v__>, 'rab__', n__0__7, <l__0__6, l__1__6>, <t__0__6, t__1__6, t__2__6>), Chid__Client(n__0__7, l__0__6), Conn(l__0__6)] 

rule Client__merged_____4__0_1__0_2_____6__89[role="Client"] : [State__Client(<'rab_____4__0_1__0_2', %v__>, return__var__9, m__0__9, <l__0__9, l__1__9>, <t__0__9, t__1__9, t__2__9>)]--[Transition__Client('rab__89', %v__), Loop__Start('rab__Client__13')]->[State__Client(<'rab_____6', %v__>, 'rab__', 'rab__', m__0__9, <t__0__9, t__1__9, t__2__9>)] 

rule Client__merged_____6_____6__0_4__0_2__85[role="Client"] : [State__Client(<'rab_____6', %v__>, return__var__14, 'rab__', l__0__14, <t__0__14, t__1__14, t__2__14>), Chid__Client(l__0__14, n__0__26), !ACP__('rab__Client', n__0__26, 'rab__invoke_rpc'), Fr(n__0__17)]--[Transition__Client('rab__85', %v__)]->[State__Client(<'rab_____6__0_4__0_2', %v__>, 'rab__', n__0__26, <t__1__14, n__0__17, t__0__14, l__0__14, 'rab__', n__0__17, l__0__14>, <t__0__14, t__1__14, t__2__14>), Out(n__0__17), Chid__Client(l__0__14, n__0__26), Invoke(n__0__26, t__0__14, n__0__17, t__1__14)] 

rule Client__merged_____6_____7__84[role="Client"] : [State__Client(<'rab_____6', %v__>, return__var__43, 'rab__', l__0__43, <t__0__43, t__1__43, t__2__43>)]--[Transition__Client('rab__84', %v__), Loop__Finish('rab__Client__13')]->[State__Client(<'rab_____7', %v__>, 'rab__', 'rab__', l__0__43, <t__0__43, t__1__43, t__2__43>)] 

rule Client__merged_____6__0_4__0_2_____6__0_5__0_1__71[role="Client"] : [State__Client(<'rab_____6__0_4__0_2', %v__>, return__var__28, m__0__28, <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28, l__5__28, l__6__28>, <t__0__28, t__1__28, t__2__28>), Returned(m__0__28, n__0__28), !ACP__('rab__Client', m__0__28, 'rab__invoke_rpc')]--[Transition__Client('rab__71', %v__)]->[State__Client(<'rab_____6__0_5__0_1', %v__>, 'rab__', 'rab__', <n__0__28, n__0__28, l__5__28, l__6__28>, <t__0__28, t__1__28, t__2__28>), Out(n__0__28)] 

rule Client__merged_____6__0_5__0_1_____6__0_7__65[role="Client"] : [State__Client(<'rab_____6__0_5__0_1', %v__>, return__var__35, 'rab__', <l__0__35, l__1__35, l__2__35, l__3__35>, <t__0__35, t__1__35, t__2__35>)]--[Transition__Client('rab__65', %v__), ImgSend(l__2__35)]->[State__Client(<'rab_____6__0_7', %v__>, 'rab__', 'rab__', <l__1__35, l__2__35, l__3__35>, <t__0__35, t__1__35, t__2__35>)] 

rule Client__merged_____6__0_7_____6__0_10__64[role="Client"] : [State__Client(<'rab_____6__0_7', %v__>, return__var__37, 'rab__', <l__0__37, l__1__37, l__2__37>, <t__0__37, t__1__37, t__2__37>), !ACP__('rab__Client', 'rab__udp', 'rab__send')]--[Transition__Client('rab__64', %v__)]->[State__Client(<'rab_____6__0_10', %v__>, 'rab__', 'rab__', l__2__37, <t__0__37, t__1__37, t__2__37>), Store('rab__udp', <l__0__37, l__1__37>)] 

rule Client__merged_____7_____7__0_3__59[role="Client"] : [State__Client(<'rab_____7', %v__>, return__var__46, 'rab__', l__0__46, <t__0__46, t__1__46, t__2__46>), !Eq__(n__0__47, n__0__48), !ACP__('rab__Client', n__0__47, 'rab__close_rpc'), Chid__Client(l__0__46, n__0__47)]--[Transition__Client('rab__59', %v__)]->[State__Client(<'rab_____7__0_3', %v__>, 'rab__', n__0__47, <l__0__46, l__0__46>, <t__0__46, t__1__46, t__2__46>), Exit(n__0__47)] 

rule Client__merged_____7__0_3_____10__56[role="Client"] : [State__Client(<'rab_____7__0_3', %v__>, return__var__50, m__0__50, <l__0__50, l__1__50>, <t__0__50, t__1__50, t__2__50>)]--[Transition__Client('rab__56', %v__), ClientClose(%v__)]->[State__Client(<'rab_____10', %v__>, 'rab__', 'rab__', 'rab__', <t__0__50, t__1__50, t__2__50>)] 

rule Client__repeat_____6__0_10_____6__42[role="Client"] : [State__Client(<'rab_____6__0_10', %v__>, return__var__42, 'rab__', l__0__42, <t__0__42, t__1__42, t__2__42>)]--[Transition__Client('rab__42', %v__), Loop__Back('rab__Client__13')]->[State__Client(<'rab_____6', %v__ %+ %1>, return__var__42, 'rab__', l__0__42, <t__0__42, t__1__42, t__2__42>)] 


// Model:  Server


rule Server__secret__pub : [!Const__('rab__priv_k', priv_k)]--[Init__(<'rab__Server', 'rab____secret__pub'>)]->[File__Server('rab____secret__pub', pk(priv_k))] 

rule InitServer[role="Server"] : []--[Init__('rab__Server')]->[State__Server(<'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__')] 

rule Server__merged_____0_____6__0_1__0_0__116[role="Server"] : [State__Server(<'rab_____0', %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), Fr(n__0__4), !Eq__(n__0__3, n__0__12), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), File__Server('rab____secret__pub', n__0__3)]--[Transition__Server('rab__116', %v__), Loop__Start('rab__Server__16')]->[State__Server(<'rab_____6__0_1__0_0', %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', n__0__12, n__0__4>, 'rab____secret__pub'), File__Server('rab____secret__pub', n__0__3), Fd__Server(n__0__4, n__0__12)] 

rule Server__merged_____0_____6__0_1__1_0__115[role="Server"] : [State__Server(<'rab_____0', %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), Fr(n__0__4), !Eq__(n__0__3, n__0__12), !Attack__('rab__Server', 'rab__tampar_channel'), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), File__Server('rab____secret__pub', n__0__3)]--[Transition__Server('rab__115', %v__), Loop__Start('rab__Server__16')]->[State__Server(<'rab_____6__0_1__1_0', %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', n__0__12, n__0__4>, 'rab____secret__pub'), File__Server('rab____secret__pub', n__0__3), Fd__Server(n__0__4, n__0__12)] 

rule Server__merged_____0_____6__114[role="Server"] : [State__Server(<'rab_____0', %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), Fr(n__0__4), !Eq__(n__0__3, n__0__12), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), !ACP__('rab__Server', 'rab____secret__pub', 'rab__fopen'), File__Server('rab____secret__pub', n__0__3)]--[Transition__Server('rab__114', %v__), Loop__Start('rab__Server__16')]->[State__Server(<'rab_____6', %v__>, 'rab__', 'rab__', <n__0__12, n__0__4>, 'rab____secret__pub'), File__Server('rab____secret__pub', n__0__3), Fd__Server(n__0__4, n__0__12)] 

rule Server__merged_____6_____9__64[role="Server"] : [State__Server(<'rab_____6', %v__>, return__var__39, 'rab__', <l__0__39, l__1__39>, t__0__39), False()]--[Transition__Server('rab__64', %v__), Loop__Finish('rab__Server__16')]->[State__Server(<'rab_____9', %v__>, 'rab__', 'rab__', 'rab__', t__0__39)] 

rule Server__merged_____6__0_1__0_0_____6__0_2__61[role="Server"] : [State__Server(<'rab_____6__0_1__0_0', %v__>, return__var__20, 'rab__', <l__0__20, l__1__20, l__2__20, l__3__20>, t__0__20), Store(l__0__20, n__0__20), !ACP__('rab__Server', l__0__20, 'rab__recv')]--[Transition__Server('rab__61', %v__)]->[State__Server(<'rab_____6__0_2', %v__>, 'rab__', 'rab__', <n__0__20, l__2__20, l__3__20>, t__0__20)] 

rule Server__merged_____6__0_1__1_0_____6__0_2__58[role="Server"] : [State__Server(<'rab_____6__0_1__1_0', %v__>, return__var__25, 'rab__', <l__0__25, l__1__25, l__2__25, l__3__25>, t__0__25), Store(l__0__25, n__0__25), In(n__1__25), !ACP__('rab__Server', l__0__25, 'rab__recv')]--[Transition__Server('rab__58', %v__)]->[State__Server(<'rab_____6__0_2', %v__>, 'rab__', 'rab__', <n__1__25, l__2__25, l__3__25>, t__0__25)] 

rule Server__merged_____6__0_2_____6__0_6__55[role="Server"] : [State__Server(<'rab_____6__0_2', %v__>, return__var__29, 'rab__', <l__0__29, l__1__29, l__2__29>, t__0__29), !NEq__(verify(fst(l__0__29), snd(l__0__29), l__1__29), true())]--[Transition__Server('rab__55', %v__), ImgRecvInvalid(snd(l__0__29))]->[State__Server(<'rab_____6__0_6', %v__>, 'rab__', 'rab__', <l__1__29, l__2__29>, t__0__29)] 

rule Server__merged_____6__0_2_____6__0_6__54[role="Server"] : [State__Server(<'rab_____6__0_2', %v__>, return__var__29, 'rab__', <l__0__29, l__1__29, l__2__29>, t__0__29), !Eq__(verify(fst(l__0__29), snd(l__0__29), l__1__29), true())]--[Transition__Server('rab__54', %v__), ImgRecvValid(snd(l__0__29))]->[State__Server(<'rab_____6__0_6', %v__>, 'rab__', 'rab__', <l__1__29, l__2__29>, t__0__29)] 

rule Server__repeat_____6__0_6_____6__38[role="Server"] : [State__Server(<'rab_____6__0_6', %v__>, return__var__38, 'rab__', <l__0__38, l__1__38>, t__0__38)]--[Transition__Server('rab__38', %v__), Loop__Back('rab__Server__16')]->[State__Server(<'rab_____6', %v__ %+ %1>, return__var__38, 'rab__', <l__0__38, l__1__38>, t__0__38)] 


// Model:  Client_ta


rule Client_ta__secret__priv : [!Const__('rab__priv_k', priv_k), !Const__('rab__sym_k', sym_k)]--[Init__(<'rab__Client_ta', 'rab____secret__priv'>)]->[File__Client_ta('rab____secret__priv', enc(priv_k, sym_k))] 

rule InitClient_ta[role="Client_ta"] : []--[Init__('rab__Client_ta')]->[State__Client_ta(<'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__')] 

rule Client_ta__merged_____3_____3__0_1__88[role="Client_ta"] : [State__Client_ta(<'rab_____3', %v__>, return__var__7, 'rab__', 'rab__', t__0__7), Invoke('rab__rpc', n__2__7, n__1__7, n__0__7), !ACP__('rab__Client_ta', 'rab__rpc', 'rab__'), File__Client_ta(n__0__7, n__0__13), !ACP__('rab__Client_ta', n__0__7, 'rab__fopen'), !ACP__('rab__Client_ta', n__0__7, 'rab__fopen'), !Eq__(n__0__13, n__0__22), Fr(n__0__14), !Eq__(n__2__7, 'rab__sign_image'), !ACP__('rab__Client_ta', 'rab__rpc', 'rab__'), !Eq__(n__0__22, n__0__29)]--[Transition__Client_ta('rab__88', %v__)]->[State__Client_ta(<'rab_____3__0_1', %v__>, 'rab__', <n__0__7, n__1__7, n__2__7>, 'rab__', t__0__7), File__Client_ta(n__0__7, n__0__13), Returned('rab__rpc', sign(n__1__7, dec(n__0__22, t__0__7)))] 

rule Client_ta__merged_____0_____1__0_0__87[role="Client_ta"] : [State__Client_ta(<'rab_____0', %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__sym_k', sym_k__0)]--[Transition__Client_ta('rab__87', %v__)]->[State__Client_ta(<'rab_____1__0_0', %v__>, 'rab__', 'rab__', 'rab__rpc', sym_k__0)] 

rule Client_ta__merged_____1__0_0_____1__0_0__0_1__86[role="Client_ta"] : [State__Client_ta(<'rab_____1__0_0', %v__>, return__var__2, 'rab__', l__0__2, t__0__2), Req(l__0__2), !ACP__('rab__Client_ta', l__0__2, 'rab__accept_rpc'), !ACP__('rab__Client_ta', l__0__2, 'rab__accept_rpc')]--[Transition__Client_ta('rab__86', %v__)]->[State__Client_ta(<'rab_____1__0_0__0_1', %v__>, 'rab__', 'rab__', l__0__2, t__0__2), Ack(l__0__2)] 

rule Client_ta__merged_____1__0_0__0_1_____3__85[role="Client_ta"] : [State__Client_ta(<'rab_____1__0_0__0_1', %v__>, return__var__4, 'rab__', l__0__4, t__0__4)]--[Transition__Client_ta('rab__85', %v__), Loop__Start('rab__Client_ta__6')]->[State__Client_ta(<'rab_____3', %v__>, 'rab__', 'rab__', 'rab__', t__0__4)] 

rule Client_ta__merged_____3_____3__0_1__83[role="Client_ta"] : [State__Client_ta(<'rab_____3', %v__>, return__var__7, 'rab__', 'rab__', t__0__7), Invoke('rab__rpc', n__2__7, n__1__7, n__0__7), !ACP__('rab__Client_ta', 'rab__rpc', 'rab__'), !NEq__(n__2__7, 'rab__sign_image')]--[Transition__Client_ta('rab__83', %v__), InValidName__Client_ta(n__2__7)]->[State__Client_ta(<'rab_____3__0_1', %v__>, 'rab__', <n__0__7, n__1__7, n__2__7>, 'rab__', t__0__7)] 

rule Client_ta__merged_____3_____4__81[role="Client_ta"] : [State__Client_ta(<'rab_____3', %v__>, return__var__44, 'rab__', 'rab__', t__0__44), Exit('rab__rpc'), !ACP__('rab__Client_ta', 'rab__rpc', 'rab__')]--[Transition__Client_ta('rab__81', %v__), Loop__Finish('rab__Client_ta__6')]->[State__Client_ta(<'rab_____4', %v__>, 'rab__', 'rab__', 'rab__', t__0__44)] 

rule Client_ta__event_____4_____5__47[role="Client_ta"] : [State__Client_ta(<'rab_____4', %v__>, return__var__47, 'rab__', 'rab__', t__0__47)]--[Transition__Client_ta('rab__47', %v__), ClientTAClose()]->[State__Client_ta(<'rab_____5', %v__>, 'rab__', 'rab__', 'rab__', t__0__47)] 

rule Client_ta__repeat_____3__0_1_____3__43[role="Client_ta"] : [State__Client_ta(<'rab_____3__0_1', %v__>, return__var__43, <m__0__43, m__1__43, m__2__43>, 'rab__', t__0__43)]--[Transition__Client_ta('rab__43', %v__), Loop__Back('rab__Client_ta__6')]->[State__Client_ta(<'rab_____3', %v__ %+ %1>, return__var__43, 'rab__', 'rab__', t__0__43)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

    "All x #i. Loop__Back(x) @i ==> Ex #j. Loop__Start(x) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

    "All x #i. Loop__Finish(x) @i ==> Ex #j. Loop__Start(x) @j & j < i"
lemma transition__Client[reuse,use_induction]:

      "All x %i #j #k . Transition__Client(x, %i) @#j &
       Transition__Client(x, %i) @ #k ==> #j = #k"

lemma transition__Server[reuse,use_induction]:

      "All x %i #j #k . Transition__Server(x, %i) @#j &
       Transition__Server(x, %i) @ #k ==> #j = #k"

lemma transition__Client_ta[reuse,use_induction]:

      "All x %i #j #k . Transition__Client_ta(x, %i) @#j &
       Transition__Client_ta(x, %i) @ #k ==> #j = #k"

lemma Correspondence : all-traces "All x #j  . ImgRecvValid(x) @ #j ==> Ex #i . ImgSend (x) @ i & i < j"
lemma Reachable : exists-trace "Ex x #i #j #k  . ClientClose(%1 %+ %1) @ #j & ClientTAClose() @ #k & ImgRecvValid(x) @ #i"
end


/*
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 15.46s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): verified (40 steps)
  AlwaysStartsWhenEnds__ (all-traces): verified (23 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): analysis incomplete (1 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 939.29s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): verified (29184 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): analysis incomplete (1 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 19.15s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): verified (228 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): analysis incomplete (1 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 28.08s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): verified (440 steps)
  Correspondence (all-traces): analysis incomplete (1 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 596.45s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): falsified - found trace (25 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
==============================================================================
summary of summaries:

analyzed: camserver.spthy

  processing time: 187.49s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): analysis incomplete (1 steps)
  Reachable (exists-trace): verified (25 steps)

==============================================================================
*/